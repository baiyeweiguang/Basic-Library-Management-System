CREATE TABLE `categories` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
)

CREATE TABLE `books` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `isbn` varchar(20) NOT NULL,
  `category_id` int DEFAULT NULL,
  `publication_date` date DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `isbn` (`isbn`),
  KEY `category_id` (`category_id`),
  CONSTRAINT `books_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`)
)

CREATE TABLE book_authors (
    id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    nationality VARCHAR(50),
    FOREIGN KEY (book_id) REFERENCES books(id)
);

CREATE TABLE sales (
    id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    sale_date DATE NOT NULL,
    CONSTRAINT fk_sales_book_id FOREIGN KEY (book_id) REFERENCES books (id)
);


-- 添加新的字段
ALTER TABLE book_authors
ADD COLUMN sex ENUM('Man', 'Female') NOT NULL;


-- 添加新的author_id列
ALTER TABLE books
ADD COLUMN author_id VARCHAR(255);

-- 将多个作者ID合并为一个逗号分隔的字符串，并存储到author_id列中
UPDATE books
SET author_id = (
    SELECT GROUP_CONCAT(book_authors.book_id)
    FROM book_authors
    WHERE book_authors.book_id = books.id
);

-- 删除原有的author列
ALTER TABLE books
DROP COLUMN author;

CREATE VIEW book_prices AS
SELECT b.title, s.unit_price, s.quantity, s.unit_price*s.quantity AS total_sales, AVG(s.unit_price) OVER () AS all_books_avg_sale_price, SUM(s.quantity * s.unit_price) OVER () AS all_books_total_sales
FROM books b
LEFT JOIN sales s ON b.id = s.book_id;


CREATE VIEW book_details AS
SELECT b.title, b.isbn, b.publication_date, c.name AS category_name, GROUP_CONCAT(DISTINCT ba.name ORDER BY ba.id SEPARATOR ', ') AS author_names
FROM books b
LEFT JOIN categories c ON b.category_id = c.id
LEFT JOIN book_authors ba ON b.id = ba.book_id
GROUP BY b.id;


CREATE VIEW category_details AS
SELECT c.name AS category_name, AVG(s.unit_price) AS average_price, SUM(s.quantity) AS total_quantity, SUM(s.quantity * s.unit_price) AS total_revenue
FROM sales s
JOIN books b ON s.book_id = b.id
JOIN categories c ON b.category_id = c.id
GROUP BY c.id;
